(()=>{var e,r,t,n,o,i,a,c={2991:(e,r,t)=>{"use strict";function n(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t(8177),t(2222),t(9554),t(8309),t(4916),t(5306),t(4747),new(function(){function e(r){!function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=document.querySelector("body"),this.url=r,this.users=[],this.yourUser=null,this.ws=new WebSocket(this.url)}var r,t;return r=e,(t=[{key:"init",value:function(){var e=this;this.formAutorization(),this.ws.addEventListener("open",(function(){console.log("connected")})),this.ws.addEventListener("message",(function(r){var t=JSON.parse(r.data);"error"===t.type?alert("Данный псевдоним занят. Выберите другой, пожалуйста."):"autorized"===t.type||"users"===t.type?(e.users=t.data,e.container.removeChild(e.container.firstChild),e.showChat()):"postMessage"===t.type&&e.showMessage(t.data)})),this.ws.addEventListener("close",(function(e){console.log("connection closed",e)})),this.ws.addEventListener("error",(function(){console.log("error")})),window.addEventListener("beforeunload",(function(){e.ws.send(JSON.stringify({type:"deleteUser",user:e.yourUser}))}))}},{key:"formAutorization",value:function(){var e=this,r=document.createElement("form");r.classList.add("autorization"),r.innerHTML='<h4>Выберите псевдоним</h4>\n      <input class="input" type="text" required>\n      <button type="submit" class="btn">Продолжить</button>',this.container.insertAdjacentElement("afterbegin",r),r.addEventListener("submit",(function(t){t.preventDefault(),e.yourUser=r.querySelector("input").value;var n={type:"autorization",name:e.yourUser};e.ws.send(JSON.stringify(n))}))}},{key:"showChat",value:function(){var e=this,r=document.createElement("form");r.classList.add("form-chat"),r.innerHTML='<div class="users"></div>\n      <div class="chat">\n        <div class="form-message"></div>\n        <input class="input-chat" type="text" placeholder="Type your message here" required>\n      </div>',this.container.insertAdjacentElement("afterbegin",r);var t=r.querySelector(".users");this.users.forEach((function(r){var n=document.createElement("li");n.classList.add("user"),n.textContent=r.name,r.name===e.yourUser&&(n.textContent="You"),t.insertAdjacentElement("beforeend",n)}));var n=r.querySelector(".input-chat");r.addEventListener("submit",(function(r){r.preventDefault();var t=n.value,o=e.dateToString(),i={type:"postMessage",data:{name:e.yourUser,context:t,time:o}};e.ws.send(JSON.stringify(i)),n.value=""}))}},{key:"dateToString",value:function(){return(new Date).toLocaleString("ru-Ru",{year:"2-digit",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"}).replace(/[,%]/g,"")}},{key:"showMessage",value:function(e){var r=document.createElement("div");r.classList.add("message");var t=e.data,n=t.name,o=t.time,i=t.context;r.innerHTML='\n      <div class="data-user">\n        <span class="user-name">'.concat(n,"</span>\n        <span>").concat(o,'</span>\n      </div>\n      <p class="text">').concat(i,"</p>"),n===this.yourUser?(r.querySelector(".user-name").textContent="You",r.classList.add("message-right")):r.classList.add("message-left"),this.container.querySelector(".form-message").appendChild(r)}}])&&n(r.prototype,t),e}())("wss://ws-backend-hzzi.onrender.com/ws").init()},3099:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},1530:(e,r,t)=>{"use strict";var n=t(8710).charAt;e.exports=function(e,r,t){return r+(t?n(e,r).length:1)}},9670:(e,r,t)=>{var n=t(111);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},8533:(e,r,t)=>{"use strict";var n=t(2092).forEach,o=t(9341),i=t(9207),a=o("forEach"),c=i("forEach");e.exports=a&&c?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},1318:(e,r,t)=>{var n=t(5656),o=t(7466),i=t(1400),a=function(e){return function(r,t,a){var c,s=n(r),u=o(s.length),l=i(a,u);if(e&&t!=t){for(;u>l;)if((c=s[l++])!=c)return!0}else for(;u>l;l++)if((e||l in s)&&s[l]===t)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:(e,r,t)=>{var n=t(9974),o=t(8361),i=t(7908),a=t(7466),c=t(5417),s=[].push,u=function(e){var r=1==e,t=2==e,u=3==e,l=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,g,m){for(var y,x,E=i(h),b=o(E),S=n(v,g,3),w=a(b.length),O=0,L=m||c,A=r?L(h,w):t||d?L(h,0):void 0;w>O;O++)if((p||O in b)&&(x=S(y=b[O],O,E),e))if(r)A[O]=x;else if(x)switch(e){case 3:return!0;case 5:return y;case 6:return O;case 2:s.call(A,y)}else switch(e){case 4:return!1;case 7:s.call(A,y)}return f?-1:u||l?l:A}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterOut:u(7)}},1194:(e,r,t)=>{var n=t(7293),o=t(5112),i=t(7392),a=o("species");e.exports=function(e){return i>=51||!n((function(){var r=[];return(r.constructor={})[a]=function(){return{foo:1}},1!==r[e](Boolean).foo}))}},9341:(e,r,t)=>{"use strict";var n=t(7293);e.exports=function(e,r){var t=[][e];return!!t&&n((function(){t.call(null,r||function(){throw 1},1)}))}},9207:(e,r,t)=>{var n=t(9781),o=t(7293),i=t(6656),a=Object.defineProperty,c={},s=function(e){throw e};e.exports=function(e,r){if(i(c,e))return c[e];r||(r={});var t=[][e],u=!!i(r,"ACCESSORS")&&r.ACCESSORS,l=i(r,0)?r[0]:s,f=i(r,1)?r[1]:void 0;return c[e]=!!t&&!o((function(){if(u&&!n)return!0;var e={length:-1};u?a(e,1,{enumerable:!0,get:s}):e[1]=1,t.call(e,l,f)}))}},5417:(e,r,t)=>{var n=t(111),o=t(3157),i=t(5112)("species");e.exports=function(e,r){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)?n(t)&&null===(t=t[i])&&(t=void 0):t=void 0),new(void 0===t?Array:t)(0===r?0:r)}},4326:e=>{var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},9920:(e,r,t)=>{var n=t(6656),o=t(3887),i=t(1236),a=t(3070);e.exports=function(e,r){for(var t=o(r),c=a.f,s=i.f,u=0;u<t.length;u++){var l=t[u];n(e,l)||c(e,l,s(r,l))}}},8880:(e,r,t)=>{var n=t(9781),o=t(3070),i=t(9114);e.exports=n?function(e,r,t){return o.f(e,r,i(1,t))}:function(e,r,t){return e[r]=t,e}},9114:e=>{e.exports=function(e,r){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:r}}},6135:(e,r,t)=>{"use strict";var n=t(7593),o=t(3070),i=t(9114);e.exports=function(e,r,t){var a=n(r);a in e?o.f(e,a,i(0,t)):e[a]=t}},9781:(e,r,t)=>{var n=t(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,r,t)=>{var n=t(7854),o=t(111),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8113:(e,r,t)=>{var n=t(5005);e.exports=n("navigator","userAgent")||""},7392:(e,r,t)=>{var n,o,i=t(7854),a=t(8113),c=i.process,s=c&&c.versions,u=s&&s.v8;u?o=(n=u.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=n[1]),e.exports=o&&+o},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(e,r,t)=>{var n=t(7854),o=t(1236).f,i=t(8880),a=t(1320),c=t(3505),s=t(9920),u=t(4705);e.exports=function(e,r){var t,l,f,d,p,h=e.target,v=e.global,g=e.stat;if(t=v?n:g?n[h]||c(h,{}):(n[h]||{}).prototype)for(l in r){if(d=r[l],f=e.noTargetGet?(p=o(t,l))&&p.value:t[l],!u(v?l:h+(g?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;s(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(t,l,d,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:(e,r,t)=>{"use strict";t(4916);var n=t(1320),o=t(7293),i=t(5112),a=t(2261),c=t(8880),s=i("species"),u=!o((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=i("replace"),d=!!/./[f]&&""===/./[f]("a","$0"),p=!o((function(){var e=/(?:)/,r=e.exec;e.exec=function(){return r.apply(this,arguments)};var t="ab".split(e);return 2!==t.length||"a"!==t[0]||"b"!==t[1]}));e.exports=function(e,r,t,f){var h=i(e),v=!o((function(){var r={};return r[h]=function(){return 7},7!=""[e](r)})),g=v&&!o((function(){var r=!1,t=/a/;return"split"===e&&((t={}).constructor={},t.constructor[s]=function(){return t},t.flags="",t[h]=/./[h]),t.exec=function(){return r=!0,null},t[h](""),!r}));if(!v||!g||"replace"===e&&(!u||!l||d)||"split"===e&&!p){var m=/./[h],y=t(h,""[e],(function(e,r,t,n,o){return r.exec===a?v&&!o?{done:!0,value:m.call(r,t,n)}:{done:!0,value:e.call(t,r,n)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:d}),x=y[0],E=y[1];n(String.prototype,e,x),n(RegExp.prototype,h,2==r?function(e,r){return E.call(e,this,r)}:function(e){return E.call(e,this)})}f&&c(RegExp.prototype[h],"sham",!0)}},9974:(e,r,t)=>{var n=t(3099);e.exports=function(e,r,t){if(n(e),void 0===r)return e;switch(t){case 0:return function(){return e.call(r)};case 1:return function(t){return e.call(r,t)};case 2:return function(t,n){return e.call(r,t,n)};case 3:return function(t,n,o){return e.call(r,t,n,o)}}return function(){return e.apply(r,arguments)}}},5005:(e,r,t)=>{var n=t(857),o=t(7854),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,r){return arguments.length<2?i(n[e])||i(o[e]):n[e]&&n[e][r]||o[e]&&o[e][r]}},647:(e,r,t)=>{var n=t(7908),o=Math.floor,i="".replace,a=/\$([$&'`]|\d\d?|<[^>]*>)/g,c=/\$([$&'`]|\d\d?)/g;e.exports=function(e,r,t,s,u,l){var f=t+e.length,d=s.length,p=c;return void 0!==u&&(u=n(u),p=a),i.call(l,p,(function(n,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return r.slice(0,t);case"'":return r.slice(f);case"<":a=u[i.slice(1,-1)];break;default:var c=+i;if(0===c)return n;if(c>d){var l=o(c/10);return 0===l?n:l<=d?void 0===s[l-1]?i.charAt(1):s[l-1]+i.charAt(1):n}a=s[c-1]}return void 0===a?"":a}))}},7854:(e,r,t)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t.g&&t.g)||function(){return this}()||Function("return this")()},6656:e=>{var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},3501:e=>{e.exports={}},4664:(e,r,t)=>{var n=t(9781),o=t(7293),i=t(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(e,r,t)=>{var n=t(7293),o=t(4326),i="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},2788:(e,r,t)=>{var n=t(5465),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},9909:(e,r,t)=>{var n,o,i,a=t(8536),c=t(7854),s=t(111),u=t(8880),l=t(6656),f=t(5465),d=t(6200),p=t(3501),h=c.WeakMap;if(a){var v=f.state||(f.state=new h),g=v.get,m=v.has,y=v.set;n=function(e,r){return r.facade=e,y.call(v,e,r),r},o=function(e){return g.call(v,e)||{}},i=function(e){return m.call(v,e)}}else{var x=d("state");p[x]=!0,n=function(e,r){return r.facade=e,u(e,x,r),r},o=function(e){return l(e,x)?e[x]:{}},i=function(e){return l(e,x)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(r){var t;if(!s(r)||(t=o(r)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}}}},3157:(e,r,t)=>{var n=t(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},4705:(e,r,t)=>{var n=t(7293),o=/#|\.prototype\./,i=function(e,r){var t=c[a(e)];return t==u||t!=s&&("function"==typeof r?n(r):!!r)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},s=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},111:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},1913:e=>{e.exports=!1},133:(e,r,t)=>{var n=t(7293);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},8536:(e,r,t)=>{var n=t(7854),o=t(2788),i=n.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},3070:(e,r,t)=>{var n=t(9781),o=t(4664),i=t(9670),a=t(7593),c=Object.defineProperty;r.f=n?c:function(e,r,t){if(i(e),r=a(r,!0),i(t),o)try{return c(e,r,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[r]=t.value),e}},1236:(e,r,t)=>{var n=t(9781),o=t(5296),i=t(9114),a=t(5656),c=t(7593),s=t(6656),u=t(4664),l=Object.getOwnPropertyDescriptor;r.f=n?l:function(e,r){if(e=a(e),r=c(r,!0),u)try{return l(e,r)}catch(e){}if(s(e,r))return i(!o.f.call(e,r),e[r])}},8006:(e,r,t)=>{var n=t(6324),o=t(748).concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,r)=>{r.f=Object.getOwnPropertySymbols},6324:(e,r,t)=>{var n=t(6656),o=t(5656),i=t(1318).indexOf,a=t(3501);e.exports=function(e,r){var t,c=o(e),s=0,u=[];for(t in c)!n(a,t)&&n(c,t)&&u.push(t);for(;r.length>s;)n(c,t=r[s++])&&(~i(u,t)||u.push(t));return u}},5296:(e,r)=>{"use strict";var t={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!t.call({1:2},1);r.f=o?function(e){var r=n(this,e);return!!r&&r.enumerable}:t},3887:(e,r,t)=>{var n=t(5005),o=t(8006),i=t(5181),a=t(9670);e.exports=n("Reflect","ownKeys")||function(e){var r=o.f(a(e)),t=i.f;return t?r.concat(t(e)):r}},857:(e,r,t)=>{var n=t(7854);e.exports=n},1320:(e,r,t)=>{var n=t(7854),o=t(8880),i=t(6656),a=t(3505),c=t(2788),s=t(9909),u=s.get,l=s.enforce,f=String(String).split("String");(e.exports=function(e,r,t,c){var s,u=!!c&&!!c.unsafe,d=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof t&&("string"!=typeof r||i(t,"name")||o(t,"name",r),(s=l(t)).source||(s.source=f.join("string"==typeof r?r:""))),e!==n?(u?!p&&e[r]&&(d=!0):delete e[r],d?e[r]=t:o(e,r,t)):d?e[r]=t:a(r,t)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||c(this)}))},7651:(e,r,t)=>{var n=t(4326),o=t(2261);e.exports=function(e,r){var t=e.exec;if("function"==typeof t){var i=t.call(e,r);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==n(e))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(e,r)}},2261:(e,r,t)=>{"use strict";var n,o,i=t(7066),a=t(2999),c=RegExp.prototype.exec,s=String.prototype.replace,u=c,l=(n=/a/,o=/b*/g,c.call(n,"a"),c.call(o,"a"),0!==n.lastIndex||0!==o.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,d=void 0!==/()??/.exec("")[1];(l||d||f)&&(u=function(e){var r,t,n,o,a=this,u=f&&a.sticky,p=i.call(a),h=a.source,v=0,g=e;return u&&(-1===(p=p.replace("y","")).indexOf("g")&&(p+="g"),g=String(e).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==e[a.lastIndex-1])&&(h="(?: "+h+")",g=" "+g,v++),t=new RegExp("^(?:"+h+")",p)),d&&(t=new RegExp("^"+h+"$(?!\\s)",p)),l&&(r=a.lastIndex),n=c.call(u?t:a,g),u?n?(n.input=n.input.slice(v),n[0]=n[0].slice(v),n.index=a.lastIndex,a.lastIndex+=n[0].length):a.lastIndex=0:l&&n&&(a.lastIndex=a.global?n.index+n[0].length:r),d&&n&&n.length>1&&s.call(n[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)})),n}),e.exports=u},7066:(e,r,t)=>{"use strict";var n=t(9670);e.exports=function(){var e=n(this),r="";return e.global&&(r+="g"),e.ignoreCase&&(r+="i"),e.multiline&&(r+="m"),e.dotAll&&(r+="s"),e.unicode&&(r+="u"),e.sticky&&(r+="y"),r}},2999:(e,r,t)=>{"use strict";var n=t(7293);function o(e,r){return RegExp(e,r)}r.UNSUPPORTED_Y=n((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),r.BROKEN_CARET=n((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},4488:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},3505:(e,r,t)=>{var n=t(7854),o=t(8880);e.exports=function(e,r){try{o(n,e,r)}catch(t){n[e]=r}return r}},6200:(e,r,t)=>{var n=t(2309),o=t(9711),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,r,t)=>{var n=t(7854),o=t(3505),i="__core-js_shared__",a=n[i]||o(i,{});e.exports=a},2309:(e,r,t)=>{var n=t(1913),o=t(5465);(e.exports=function(e,r){return o[e]||(o[e]=void 0!==r?r:{})})("versions",[]).push({version:"3.8.2",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},8710:(e,r,t)=>{var n=t(9958),o=t(4488),i=function(e){return function(r,t){var i,a,c=String(o(r)),s=n(t),u=c.length;return s<0||s>=u?e?"":void 0:(i=c.charCodeAt(s))<55296||i>56319||s+1===u||(a=c.charCodeAt(s+1))<56320||a>57343?e?c.charAt(s):i:e?c.slice(s,s+2):a-56320+(i-55296<<10)+65536}};e.exports={codeAt:i(!1),charAt:i(!0)}},1400:(e,r,t)=>{var n=t(9958),o=Math.max,i=Math.min;e.exports=function(e,r){var t=n(e);return t<0?o(t+r,0):i(t,r)}},5656:(e,r,t)=>{var n=t(8361),o=t(4488);e.exports=function(e){return n(o(e))}},9958:e=>{var r=Math.ceil,t=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?t:r)(e)}},7466:(e,r,t)=>{var n=t(9958),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,r,t)=>{var n=t(4488);e.exports=function(e){return Object(n(e))}},7593:(e,r,t)=>{var n=t(111);e.exports=function(e,r){if(!n(e))return e;var t,o;if(r&&"function"==typeof(t=e.toString)&&!n(o=t.call(e)))return o;if("function"==typeof(t=e.valueOf)&&!n(o=t.call(e)))return o;if(!r&&"function"==typeof(t=e.toString)&&!n(o=t.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},9711:e=>{var r=0,t=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+t).toString(36)}},3307:(e,r,t)=>{var n=t(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(e,r,t)=>{var n=t(7854),o=t(2309),i=t(6656),a=t(9711),c=t(133),s=t(3307),u=o("wks"),l=n.Symbol,f=s?l:l&&l.withoutSetter||a;e.exports=function(e){return i(u,e)||(c&&i(l,e)?u[e]=l[e]:u[e]=f("Symbol."+e)),u[e]}},2222:(e,r,t)=>{"use strict";var n=t(2109),o=t(7293),i=t(3157),a=t(111),c=t(7908),s=t(7466),u=t(6135),l=t(5417),f=t(1194),d=t(5112),p=t(7392),h=d("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),x=function(e){if(!a(e))return!1;var r=e[h];return void 0!==r?!!r:i(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var r,t,n,o,i,a=c(this),f=l(a,0),d=0;for(r=-1,n=arguments.length;r<n;r++)if(x(i=-1===r?a:arguments[r])){if(d+(o=s(i.length))>v)throw TypeError(g);for(t=0;t<o;t++,d++)t in i&&u(f,d,i[t])}else{if(d>=v)throw TypeError(g);u(f,d++,i)}return f.length=d,f}})},9554:(e,r,t)=>{"use strict";var n=t(2109),o=t(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},8309:(e,r,t)=>{var n=t(9781),o=t(3070).f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/,s="name";n&&!(s in i)&&o(i,s,{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(e){return""}}})},4916:(e,r,t)=>{"use strict";var n=t(2109),o=t(2261);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},5306:(e,r,t)=>{"use strict";var n=t(7007),o=t(9670),i=t(7466),a=t(9958),c=t(4488),s=t(1530),u=t(647),l=t(7651),f=Math.max,d=Math.min;n("replace",2,(function(e,r,t,n){var p=n.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,h=n.REPLACE_KEEPS_$0,v=p?"$":"$0";return[function(t,n){var o=c(this),i=null==t?void 0:t[e];return void 0!==i?i.call(t,o,n):r.call(String(o),t,n)},function(e,n){if(!p&&h||"string"==typeof n&&-1===n.indexOf(v)){var c=t(r,e,this,n);if(c.done)return c.value}var g=o(e),m=String(this),y="function"==typeof n;y||(n=String(n));var x=g.global;if(x){var E=g.unicode;g.lastIndex=0}for(var b=[];;){var S=l(g,m);if(null===S)break;if(b.push(S),!x)break;""===String(S[0])&&(g.lastIndex=s(m,i(g.lastIndex),E))}for(var w,O="",L=0,A=0;A<b.length;A++){S=b[A];for(var T=String(S[0]),C=f(d(a(S.index),m.length),0),_=[],j=1;j<S.length;j++)_.push(void 0===(w=S[j])?w:String(w));var I=S.groups;if(y){var k=[T].concat(_,C,m);void 0!==I&&k.push(I);var D=String(n.apply(void 0,k))}else D=u(T,m,C,_,I,n);C>=L&&(O+=m.slice(L,C)+D,L=C+T.length)}return O+m.slice(L)}]}))},4747:(e,r,t)=>{var n=t(7854),o=t(8324),i=t(8533),a=t(8880);for(var c in o){var s=n[c],u=s&&s.prototype;if(u&&u.forEach!==i)try{a(u,"forEach",i)}catch(e){u.forEach=i}}},4783:(e,r,t)=>{"use strict";var n=t(5618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function s(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded=!0,e.parentNode.removeChild(e)})),t.addEventListener("error",(function(){t.isLoaded=!0,e.parentNode.removeChild(e)})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function u(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&s(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),c;var t,f,d=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=d(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return a.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e,{stripWWW:!1}),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(s(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void u();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),u())},50,f=0,function(){var e=this,r=arguments,n=function(){return t.apply(e,r)};clearTimeout(f),f=setTimeout(n,50)}}},5618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},8177:(e,r,t)=>{"use strict";var n=t(4783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},s={};function u(e){if(s[e])return s[e].exports;var r=s[e]={id:e,exports:{}},t={id:e,module:r,factory:c[e],require:u};return u.i.forEach((function(e){e(t)})),r=t.module,t.factory.call(r.exports,r,r.exports,t.require),r.exports}u.m=c,u.c=s,u.i=[],u.hu=e=>e+"."+u.h()+".hot-update.js",u.miniCssF=e=>"main.css",u.hmrF=()=>"main."+u.h()+".hot-update.json",u.h=()=>"d583c9cdd3d4d050f931",u.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),u.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="ajs:",u.l=(t,n,o)=>{if(e[t])e[t].push(n);else{var i,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var l=c[s];if(l.getAttribute("src")==t||l.getAttribute("data-webpack")==r+o){i=l;break}}i||(a=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,u.nc&&i.setAttribute("nonce",u.nc),i.setAttribute("data-webpack",r+o),i.src=t),e[t]=[n];var f=(r,n)=>{i.onerror=i.onload=null,clearTimeout(d);var o=e[t];if(delete e[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},d=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),a&&document.head.appendChild(i)}},(()=>{var e,r,t,n,o={},i=u.c,a=[],c=[],s="idle";function l(e){s=e;for(var r=0;r<c.length;r++)c[r].call(null,e)}function f(e){if(0===r.length)return e();var t=r;return r=[],Promise.all(t).then((function(){return f(e)}))}function d(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return l("check"),u.hmrM().then((function(n){if(!n)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return r=[],t=[],Promise.all(Object.keys(u.hmrC).reduce((function(e,r){return u.hmrC[r](n.c,n.r,n.m,e,t,o),e}),[])).then((function(){return f((function(){return e?h(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=t.map((function(r){return r(e)}));t=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var r=e.apply(a);if(r)for(var t=0;t<r.length;t++)c.push(r[t])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return c.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(c))}function v(){if(n)return t||(t=[]),Object.keys(u.hmrI).forEach((function(e){n.forEach((function(r){u.hmrI[e](r,t)}))})),n=void 0,!0}u.hmrD=o,u.i.push((function(h){var v,g,m,y=h.module,x=function(t,n){var o=i[n];if(!o)return t;var c=function(r){if(o.hot.active){if(i[r]){var c=i[r].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+n),a=[];return t(r)},u=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&"e"!==d&&Object.defineProperty(c,d,u(d));return c.e=function(e){return function(e){switch(s){case"ready":return l("prepare"),r.push(e),f((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(t.e(e))},c}(h.require,h.id);y.hot=(v=h.id,g=y,m={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){a=g.parents.slice(),e=v,u(v)},active:!0,accept:function(e,r){if(void 0===e)m._selfAccepted=!0;else if("function"==typeof e)m._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)m._acceptedDependencies[e[t]]=r||function(){};else m._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)m._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)m._declinedDependencies[e[r]]=!0;else m._declinedDependencies[e]=!0},dispose:function(e){m._disposeHandlers.push(e)},addDisposeHandler:function(e){m._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=m._disposeHandlers.indexOf(e);r>=0&&m._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":t=[],Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](v,t)})),l("ready");break;case"ready":Object.keys(u.hmrI).forEach((function(e){u.hmrI[e](v,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:d,apply:p,status:function(e){if(!e)return s;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:o[v]},e=void 0,m),y.parents=a,y.children=[],a=[],h.require=x})),u.hmrC={},u.hmrI={}})(),(()=>{var e;u.g.importScripts&&(e=u.g.location+"");var r=u.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),u.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||r,s=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=a,s.request=c,o.parentNode.removeChild(o),n(s)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(a=t[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===r))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===r)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),u.hmrC.miniCss=(e,r,c,s,l,f)=>{l.push(a),e.forEach((e=>{var r=u.miniCssF(e),a=u.p+r;const c=n(r,a);c&&s.push(new Promise(((r,n)=>{var s=t(e,a,(()=>{s.as="style",s.rel="preload",r()}),n);o.push(c),i.push(s)})))}))},(()=>{var e,r,t,n,o={179:0},i={};function a(e){return new Promise(((r,t)=>{i[e]=r;var n=u.p+u.hu(e),o=new Error;u.l(n,(r=>{if(i[e]){i[e]=void 0;var n=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,t(o)}}))}))}function c(i){function a(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,s=u.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<s.parents.length;l++){var f=s.parents[l],d=u.c[f];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===r.indexOf(f)&&(d.hot._acceptedDependencies[i]?(t[f]||(t[f]=[]),c(t[f],[i])):(delete t[f],r.push(f),n.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function c(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}u.f&&delete u.f.jsonpHmr,e=void 0;var s={},l=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(u.o(r,p)){var h,v=r[p],g=!1,m=!1,y=!1,x="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(x="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(g=new Error("Aborted because of self decline: "+h.moduleId+x));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+x));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+x));break;case"accepted":i.onAccepted&&i.onAccepted(h),m=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(g)return{error:g};if(m)for(p in f[p]=v,c(l,h.outdatedModules),h.outdatedDependencies)u.o(h.outdatedDependencies,p)&&(s[p]||(s[p]=[]),c(s[p],h.outdatedDependencies[p]));y&&(c(l,[h.moduleId]),f[p]=d)}r=void 0;for(var E,b=[],S=0;S<l.length;S++){var w=l[S];u.c[w]&&u.c[w].hot._selfAccepted&&f[w]!==d&&!u.c[w].hot._selfInvalidated&&b.push({module:w,require:u.c[w].hot._requireSelf,errorHandler:u.c[w].hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete o[e]})),t=void 0;for(var r,n=l.slice();n.length>0;){var i=n.pop(),a=u.c[i];if(a){var c={},f=a.hot._disposeHandlers;for(S=0;S<f.length;S++)f[S].call(null,c);for(u.hmrD[i]=c,a.hot.active=!1,delete u.c[i],delete s[i],S=0;S<a.children.length;S++){var d=u.c[a.children[S]];d&&(e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1)}}}for(var p in s)if(u.o(s,p)&&(a=u.c[p]))for(E=s[p],S=0;S<E.length;S++)r=E[S],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(e){for(var r in f)u.o(f,r)&&(u.m[r]=f[r]);for(var t=0;t<n.length;t++)n[t](u);for(var o in s)if(u.o(s,o)){var a=u.c[o];if(a){E=s[o];for(var c=[],d=[],p=0;p<E.length;p++){var h=E[p],v=a.hot._acceptedDependencies[h];if(v){if(-1!==c.indexOf(v))continue;c.push(v),d.push(h)}}for(var g=0;g<c.length;g++)try{c[g].call(null,E)}catch(r){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[g],error:r}),i.ignoreErrored||e(r)}}}for(var m=0;m<b.length;m++){var y=b[m],x=y.module;try{y.require(x)}catch(r){if("function"==typeof y.errorHandler)try{y.errorHandler(r)}catch(t){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:t,originalError:r}),i.ignoreErrored||e(t),e(r)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:x,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdateajs=(e,t,o)=>{for(var a in t)u.o(t,a)&&(r[a]=t[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},u.hmrI.jsonp=function(e,o){r||(r={},n=[],t=[],o.push(c)),u.o(r,e)||(r[e]=u.m[e])},u.hmrC.jsonp=function(i,s,l,f,d,p){d.push(c),e={},t=s,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),n=[],i.forEach((function(r){u.o(o,r)&&void 0!==o[r]&&(f.push(a(r)),e[r]=!0)})),u.f&&(u.f.jsonpHmr=function(r,t){e&&!u.o(e,r)&&u.o(o,r)&&void 0!==o[r]&&(t.push(a(r)),e[r]=!0)})},u.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(u.p+u.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),u(2991)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,